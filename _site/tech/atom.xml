<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Nick on Computing: blog</title>
    <link href="http://nickmcavoy.com/blog/tech/atom.xml" rel="self" />
    <link href="http://nickmcavoy.com/blog" />
    <id>http://nickmcavoy.com/blog/tech/atom.xml</id>
    <author>
        <name>Nicholas McAvoy</name>
        <email>nicholas.mcavoy@gmail.com</email>
    </author>
    <updated>2014-05-27T00:00:00Z</updated>
    <entry>
    <title>Pallet for Automation and Profit</title>
    <link href="http://nickmcavoy.com/blog/tech/posts/2014/05/27/pallet-for-automation-and-profit/" />
    <id>http://nickmcavoy.com/blog/tech/posts/2014/05/27/pallet-for-automation-and-profit/</id>
    <published>2014-05-27T00:00:00Z</published>
    <updated>2014-05-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1 class="entry-title">
      <a href="/tech/posts/2014/05/27/pallet-for-automation-and-profit/">Pallet for Automation and Profit</a>
    </h1>
    <div class="meta">
      <time datetime="2014-05-27" pubdate data-updated="true">27 May 2014</time>
      <div class="tags"><a href="/tags/devops/">devops</a> | <a href="/tags/Clojure/">Clojure</a></div>
    </div>
  </header>

  <p>There are a million little projects I would like to build in my spare time and have sitting out there on the Internet. It’s tempting to get hacking on them as soon as I think of them, but that ignores an entire world of things that need to happen between committing the code and having it running on the Web.</p>
<p>Before software can be run, it needs to be deployed. Before it can be deployed, a server needs to be provisioned and waiting for it. Of course all of this can be done manually, but that only makes sense when n=1, i.e. never. So we’ll automate that, and while we’re at it we might as well try and mix in some of our favorite principles from software engineering proper, such as repeatability (idempotence?) and even immutability.</p>
<p>Chef and Puppet are the most popular tools for this kind of automation. At Relay we use Chef. I did not want to use either because I’m difficult like that; I’m not going to spend my free time writing Ruby or python if there is a good alternative. So I turned to Pallet.</p>
<!-- MORE -->

<h3 id="about-pallet">About Pallet</h3>
<p>Pallet is a Clojure project, so you could almost say it had me at <code>(println &quot;Hello&quot;)</code>. I’m not any kind of an expert in Chef and I’ve never touched Puppet, so I don’t have a great idea of what each system’s distinctives are. But as far as I can tell here are some of Pallet’s emphases:</p>
<ul>
<li><p>Pallet’s work does not start with a running virtual private server. Pallet uses JClouds to talk to cloud providers directly in doing things like spinning up server instances.</p></li>
<li><p>Nor does Pallet’s work finish when the server is provisioned. It can apparently be used to deploy your software, to start and stop services, and even to run administrative tasks. “To be honest,” the documentation admits, “this wasn’t an initial design goal, but has come out of the wash that way.”</p></li>
<li><p>Pallet doesn’t require any software to be installed on your destination servers. It just executes all of its commands over ssh from whatever JVM you run it on. This seems simpler than Chef to me.</p></li>
</ul>
<h3 id="using-pallet">Using Pallet</h3>
<p>I created a Pallet template using Clojure’s build tool, Leiningen. It being a Clojure project, I loaded it into a new <code>lein repl</code> and was thus able to develop and execute right from my connected Emacs buffer.</p>
<p>For all of my projects I envision the same basic setup. Just like at Relay, I’ll put nginx in front of ports 80 and 443 and use it to serve up static assets and reverse proxy through to other webservers running for specific projects. Most of my projects will probably run on the JVM, so I’ll need to install java. And git will probably be necessary. So, for my first milestone I thought I would get a vps running with nginx, java, and git.</p>
<p>As for a target first project, this blog used to run embedded in a Play! framework app on Heroku, but I wanted to start hosting it in a vps. So I thought I’d start with the words you’re reading. Simple.</p>
<p>Here’s what I ended up with:</p>
<pre class="sourceCode clojure"><code class="sourceCode clojure">(<span class="kw">ns</span> nmdc.groups.nmdc
  <span class="st">&quot;Node defintions for nmdc&quot;</span>
  (<span class="kw">:require</span>
   [pallet.api <span class="kw">:refer</span> [group-spec server-spec node-spec plan-fn]]
   [pallet.compute <span class="kw">:as</span> compute]
   [pallet.crate.automated-admin-user <span class="kw">:refer</span> [automated-admin-user]]
   [pallet.crate.git <span class="kw">:as</span> git-crate]
   [pallet.crate.java <span class="kw">:as</span> java-crate]
   [pallet.crate.nginx <span class="kw">:as</span> nginx-crate]))

(<span class="kw">def</span><span class="fu"> nginx-config</span>
<span class="co">;; .....</span>
)

(<span class="kw">def</span>
<span class="fu"> </span>^{<span class="kw">:doc</span> <span class="st">&quot;Define a server spec for nmdc&quot;</span>}
 nmdc-server
 (server-spec
  <span class="kw">:extends</span> [(git-crate/git {})
            (java-crate/server-spec {<span class="kw">:vendor</span> <span class="kw">:openjdk</span>
                                     <span class="kw">:components</span> #{<span class="kw">:jdk</span> <span class="kw">:jre</span>}
                                     })
            (nginx-crate/nginx nginx-config)]))

(<span class="kw">def</span><span class="fu"> nmdc-nodes</span>
     (pallet.compute/instantiate-provider
      <span class="st">&quot;node-list&quot;</span>
      <span class="kw">:node-list</span> [[<span class="st">&quot;prod&quot;</span> <span class="st">&quot;nmdc&quot;</span> <span class="st">&quot;107.170.182.57&quot;</span> <span class="kw">:ubuntu</span>]]))

(<span class="kw">defn</span><span class="fu"> provision-nmdc </span>[]
  (pallet.api/lift
  (group-spec
    <span class="st">&quot;nmdc&quot;</span>
    <span class="kw">:extends</span> [nmdc-server]
    <span class="kw">:node-spec</span> (node-spec
      <span class="kw">:image</span> {<span class="kw">:os-family</span> <span class="kw">:ubuntu</span>}
      <span class="kw">:hardware</span> {<span class="kw">:min-cores</span> <span class="dv">1</span>}))
   nmdc-group
   <span class="kw">:compute</span> nmdc-nodes
   <span class="kw">:phase</span> [<span class="kw">:install</span> <span class="kw">:settings</span> <span class="kw">:configure</span> <span class="kw">:reload</span>]))

(<span class="kw">comment</span>

  (<span class="kw">def</span><span class="fu"> next-run </span>(provision-nmdc))
  (<span class="kw">-&gt;</span> next-run <span class="kw">:results</span> <span class="kw">first</span> <span class="kw">:result</span>)
)</code></pre>
<p>If you can scrutinize the syntax a little bit, you’ll see the above code is about as simple as you could want for the task I described. A <code>server-spec</code> declares that I want to install git, java, and nginx. Then in a <code>node-list</code> I say my server is at a certain IP address running ubuntu. Then in my <code>provision</code> function I apply that spec to that server, executing phases for installing and configuring the software and reloading the nginx configuration.</p>
<p>I didn’t bother hooking Pallet up to my cloud provider digitalocean’s api directly because for the foreseeable future my projects will be able to run on single instances and there’s no reason to use a shotgun to kill an ant.</p>
<p>The only weird thing about this process for me was specifying the nginx configuration. Instead of giving the crate some relative path to the config files I want installed, it has me pass in the configuration in the form of a Clojure map. I thought that was weird. Maybe there’s a way to specify config files without cloning and modifying the crate itself; I’ll have to see.</p>
<h3 id="in-sum">In sum</h3>
<p>I don’t know if Pallet will ultimately prove a better choice than Chef or not. I was definitely able to get up and running with it faster than I could with Chef, but since the user base is smaller by at least an order of magnitude I may have to roll my own crates more often than I might with Chef. I’m also not sure how much Pallet actually takes functional principles to heart and how much it’s just a slightly more appealing wrapper for bash.</p>
<p>At any rate, I plan to keep using it and I’m happy with what I’ve done so far.</p>
</article>

]]></summary>
</entry>
<entry>
    <title>Fun with Haskell and Loan Repayment</title>
    <link href="http://nickmcavoy.com/blog/tech/posts/2013/11/06/fun-with-haskell-and-loan-repayment/" />
    <id>http://nickmcavoy.com/blog/tech/posts/2013/11/06/fun-with-haskell-and-loan-repayment/</id>
    <published>2013-11-06T00:00:00Z</published>
    <updated>2013-11-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1 class="entry-title">
      <a href="/tech/posts/2013/11/06/fun-with-haskell-and-loan-repayment/">Fun with Haskell and Loan Repayment</a>
    </h1>
    <div class="meta">
      <time datetime="2013-11-06" pubdate data-updated="true"> 6 November 2013</time>
      <div class="tags"><a href="/tags/Haskell/">Haskell</a> | <a href="/tags/personal%20computing/">personal computing</a></div>
    </div>
  </header>

  <p>It was time to put Mrs. Parish to the test.</p>
<p>Mrs. Parish was my trigonometry and calculus teacher in 11th and 12th grade. She was a wonderful teacher. That’s part of why I remember from her class the claim that:</p>
<p><strong>“If you make just one extra payment per year on a thirty-year mortgage, you will pay the loan off in only 17 years.”</strong></p>
<p>This promise seemed like a bona-fide secret of life. Save half the time for an incremental increase in effort? Sign me up!</p>
<p>But was it true? I’d meant ever since to go over the math. I turned to my laptop to find out.</p>
<!-- MORE -->

<h3 id="forget-math">Forget math</h3>
<p>I could have probably solved this problem with math. There are plenty of formulae <a href="https://en.wikipedia.org/wiki/Mortgage_calculator#Monthly_payment_formula">readily available</a> related to this problem. Plugging those in would be straightforward.</p>
<p>But I wanted to be satisfied I understood what I was doing, if nothing else because otherwise down the line I might not really trust or remember what I found out. And when it comes to understanding, my comparative advantage nowadays is in programming, not in mathematics per se.</p>
<p>I remembered the fundamental law governing continuously-compounding interest:</p>
<pre><code>Balance = Principal * e ^ (rate * time)</code></pre>
<p>Periodic payments are easy enough to model, too, but an analytic solution for the time when the balance reaches zero did not leap off the page at me.</p>
<p>However, one thing I do know how to do is write a simulation!</p>
<h3 id="setting-up">Setting up</h3>
<p>The idea is you have a loan with certain principal, annual percentage rate, and suggested monthly payment:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Loan</span> <span class="fu">=</span> <span class="dt">Loan</span> {
<span class="ot">  balance ::</span> <span class="dt">Double</span>
,<span class="ot"> apr     ::</span> <span class="dt">Double</span>
,<span class="ot"> monthly ::</span> <span class="dt">Double</span>
} <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)

sampleMortgage <span class="fu">=</span> <span class="dt">Loan</span> <span class="dv">250000</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">05</span> <span class="dv">1342</span><span class="fu">.</span><span class="dv">05</span></code></pre>
<p>Then you want to know, what happens if I make extra payments? Or, since it’s probably easier to set up, what happens if I make my monthly payment proportionately larger? Are these approaches interchangeable? We’ll call this behavior a RepaymentStrategy:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">RepaymentStrategy</span> <span class="fu">=</span> <span class="dt">Strategy</span> {
<span class="ot">  paymentsPerYear   ::</span> <span class="dt">Int</span>
,<span class="ot"> fractionOfMonthly ::</span> <span class="dt">Double</span>
} <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</code></pre>
<p>I can think of two ways to evaluate the paydown of a loan. The first concern is how long it takes. Maybe you want to get the debt monkey off your back as soon as possible. But it’s also possible what you most care about is minimizing the total interest you pay. These two things should go hand in hand, but we’ll keep track of them both just to see:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">SimProgress</span> <span class="fu">=</span> <span class="dt">Sim</span> {
<span class="ot">  elapsedT      ::</span> <span class="dt">Double</span>
,<span class="ot"> principalPaid ::</span> <span class="dt">Double</span>
,<span class="ot"> interestPaid  ::</span> <span class="dt">Double</span>
,<span class="ot"> totalPayments ::</span> <span class="dt">Int</span>
} <span class="kw">deriving</span> <span class="dt">Eq</span>

<span class="kw">type</span> <span class="dt">SimResult</span> <span class="fu">=</span> <span class="dt">Either</span> <span class="dt">String</span> <span class="dt">SimProgress</span></code></pre>
<h3 id="letting-the-air-out">Letting the air out</h3>
<p>Writing this program helped me develop some intuition for paying down compound interest. As I reasoned I pictured the debt as an inflating balloon.</p>
<p>The debt balloon is always inflating. That’s interest. Every now and then you come over and let some air out. That’s making a payment.</p>
<p>Leave the balloon alone for long and you will return to find it unmanageably large. That sad reality is particularly true because interest compounds: the air that was just let into the balloon is now letting air into the balloon itself. It’s not just that the volume of the balloon (total debt) is increasing; it’s that it’s increasing at an increasing rate. It’s really easy to get into trouble with debt!</p>
<p>So it’s best to keep letting the air out. With each trip, you must let out more air than came into the balloon since your last visit, or you’ll never get it deflated. If you really want to get ahead, you need to let out a significant amount of air <em>over and above</em> the “interest air.”</p>
<h3 id="writing-the-sim">Writing the sim</h3>
<p>In an imperative language, the cycle of payments would be represented by a big <code>while</code> loop. Haskell doesn’t have those, so we’ll have to rely on recursion:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">
<span class="ot">paydown ::</span> <span class="dt">RepaymentStrategy</span> <span class="ot">-&gt;</span> <span class="dt">Loan</span> <span class="ot">-&gt;</span> <span class="dt">SimResult</span>
paydown repaymentStrategy loan <span class="fu">=</span> step repaymentStrategy loan initialSimProgress

<span class="ot">step ::</span> <span class="dt">RepaymentStrategy</span> <span class="ot">-&gt;</span> <span class="dt">Loan</span> <span class="ot">-&gt;</span> <span class="dt">SimProgress</span> <span class="ot">-&gt;</span> <span class="dt">SimResult</span>
step  s<span class="fu">@</span>(<span class="dt">Strategy</span> perYear fractionOfMonthly) l<span class="fu">@</span>(<span class="dt">Loan</span> balance apr monthly) sim
  <span class="fu">|</span> balance <span class="fu">&lt;=</span> <span class="dv">0</span><span class="fu">.</span><span class="dv">01</span>       <span class="fu">=</span> <span class="dt">Right</span> sim
  <span class="fu">|</span> (elapsedT sim) <span class="fu">&gt;=</span> <span class="dv">100</span> <span class="fu">=</span> <span class="dt">Left</span> <span class="st">&quot;That better not take more than a century to repay.&quot;</span>
  <span class="fu">|</span> otherwise             <span class="fu">=</span> step s (l {balance <span class="fu">=</span> balance'}) sim' <span class="kw">where</span>
      dt                <span class="fu">=</span> <span class="dv">1</span> <span class="fu">/</span> (fromIntegral perYear)
      compoundedBalance <span class="fu">=</span> pert l dt
      payment           <span class="fu">=</span> monthly <span class="fu">*</span> fractionOfMonthly
      balance'          <span class="fu">=</span> compoundedBalance <span class="fu">-</span> payment</code></pre>
<p>Our top-level function <code>paydown</code> winds up its recursive child <code>step</code> and sets it running. <code>step</code> first checks to see whether the loan it has been handed has already been paid off; if so the recursion can stop and a successful result can be returned. Then, it sees if it’s taking more than a century to pay down the loan; if so there is probably something wrong and we will just exit the sim with an error message.</p>
<p>Barring those scenarios, we will let the balloon inflate for another payment period and then let some air out. The inflation (compounding) is defined by the “pert” formula listed above.<sup>1</sup> Our only inherent limitation should be the imperfections of floating point arithmetic, which I do not think will hurt us much.</p>
<p>Other than that, we figure out how much our payment is and we take it off the top. Phewww</p>
<h3 id="results">Results</h3>
<p>Was Mrs. Parish right? We turn to <code>ghci</code>, first with a sanity check:</p>
<pre><code>*Sim&gt; sampleMortgage
Loan {balance = 250000.0, apr = 5.0e-2, monthly = 1342.05}

*Sim&gt; paydown defaultRepaymentStrategy sampleMortgage
Right The loan will be paid down in 30 years, 1 months.
The composition of the payoff was  51.602483068740824 % principal, and 48.39751693125917 % interest.</code></pre>
<p>Yeah, yeah, our <code>Show</code> instance is beat. So what. More importantly, you might wonder if we have an off-by-one error: this is supposed to be a 30-year mortgage, not a 361-monther. But there are enough subtle differences between our sim and reality, for instance rounding to the cent, that I’m not going to worry about the small discrepancy.</p>
<p>Okay, Mrs. Parish, now <em>I</em> am handing <em>you</em> a moment of truth:</p>
<pre><code>*Sim&gt; paydown defaultRepaymentStrategy {paymentsPerYear = 13} sampleMortgage
Right The loan will be paid down in 25 years, 4 months.
The composition of the payoff was  56.62623594541301 % principal, and 43.373764054586985 % interest.</code></pre>
<p>Lies! I was promised 17 years, not 25! Or so I remember; I could be wrong. In any case, our 25 extra payments over 25 years saved us 45 payments in the long run! The interest proportion of our payment went down 5%! Considering that adding a twelfth to our payments is unlikely to make a significant difference to our budget, this move easily seems worth making.</p>
<p>What happens if we are even more aggressive in our extra payments?</p>
<pre><code>*Sim&gt; paydown defaultRepaymentStrategy {fractionOfMonthly = 13/12} sampleMortgage
Right The loan will be paid down in 25 years, 4 months.
The composition of the payoff was  56.63780738517451 % principal, and 43.362192614825496 % interest.

*Sim&gt; paydown defaultRepaymentStrategy {fractionOfMonthly = 5/4} sampleMortgage
Right The loan will be paid down in 19 years, 6 months.
The composition of the payoff was  63.841323906512834 % principal, and 36.15867609348716 % interest.

*Sim&gt; paydown defaultRepaymentStrategy {fractionOfMonthly = 6/4} sampleMortgage
Right The loan will be paid down in 14 years, 8 months.
The composition of the payoff was  70.89140748962909 % principal, and 29.10859251037091 % interest.

*Sim&gt; paydown defaultRepaymentStrategy {fractionOfMonthly = 7/4} sampleMortgage
Right The loan will be paid down in 11 years, 10 months.
The composition of the payoff was  75.61532395309146 % principal, and 24.38467604690854 % interest.

*Sim&gt; paydown defaultRepaymentStrategy {fractionOfMonthly = 8/4} sampleMortgage
Right The loan will be paid down in 9 years, 11 months.
The composition of the payoff was  78.94371001656597 % principal, and 21.056289983434027 % interest.

*Sim&gt; paydown defaultRepaymentStrategy {fractionOfMonthly = 3} sampleMortgage
Right The loan will be paid down in 6 years, 1 months.
The composition of the payoff was  86.39320510227122 % principal, and 13.606794897728777 % interest.

*Sim&gt; paydown defaultRepaymentStrategy {fractionOfMonthly = 4} sampleMortgage
Right The loan will be paid down in 4 years, 4 months.
The composition of the payoff was  89.76061139861294 % principal, and 10.23938860138706 % interest.

*Sim&gt; paydown defaultRepaymentStrategy {fractionOfMonthly = 5} sampleMortgage
Right The loan will be paid down in 3 years, 5 months.
The composition of the payoff was  91.89421558703962 % principal, and 8.105784412960372 % interest.</code></pre>
<h3 id="conclusion">Conclusion</h3>
<p>First, we see the rough equivalence of making more payments and making bigger payments. More payments are a little better because air is let out more frequently, preventing new air from bringing in newer air, but it doesn’t make much difference here.</p>
<p>Second, we see that incremental increases in the payment make a huge difference! Increasing payments by a fourth cuts repayment time by a third, and doubling it does so by more than two thirds.</p>
<p>Third, we see our increases bring us diminishing benefit. Paying an extra 50% has a far greater impact than going from 2x to 3x our payment.</p>
<p>Based on these data, we begin to see the grounds for a more optimum loan-repayment strategy. In general, we <em>will</em> want to pay slightly more than the suggested payment on a loan, both in order to finish it faster and to pay less interest. However, we probably do not need to go overboard in doing so; more extreme increases won’t decrease repayment time or interest burden very much.</p>
<p>Thanks, Mrs. Parish!</p>
<h3 id="source">Source</h3>
<p>You can find the source for these calculations <a href="https://github.com/ohbadiah/loan-repayment">here</a>.</p>
<p><BR /></p>
<h6 id="one-nice-thing-about-this-formula-is-it-is-exact.-unlike-the-case-of-say-a-simulation-of-a-projectile-the-size-of-our-time-slice-is-not-a-limiting-factor.-our-simulation-can-visit-the-balloon-only-at-payment-time-without-loss-of-accuracy."><sup>1</sup> One nice thing about this formula is it is exact. Unlike the case of, say, a simulation of a projectile, the size of our time slice is not a limiting factor. Our simulation can visit the balloon only at payment time without loss of accuracy.</h6>
</article>

]]></summary>
</entry>
<entry>
    <title>Tech Support Conundrum</title>
    <link href="http://nickmcavoy.com/blog/tech/posts/2013/10/31/tech-support-conundrum/" />
    <id>http://nickmcavoy.com/blog/tech/posts/2013/10/31/tech-support-conundrum/</id>
    <published>2013-10-31T00:00:00Z</published>
    <updated>2013-10-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1 class="entry-title">
      <a href="/tech/posts/2013/10/31/tech-support-conundrum/">Tech Support Conundrum</a>
    </h1>
    <div class="meta">
      <time datetime="2013-10-31" pubdate data-updated="true">31 October 2013</time>
      <div class="tags"><a href="/tags/Linux/">Linux</a> | <a href="/tags/adventures%20of%20Nick%20and%20Matt/">adventures of Nick and Matt</a></div>
    </div>
  </header>

  <h3 id="the-problem">The Problem</h3>
<p>The audio jack on my laptop broke, so I had to install a new operating system.</p>
<p>Tech support made me do it. Well, tech support and DRM. I had to get it fixed since I listen to music all of the time when I am computing. If my iphone wasn’t such a useless piece of hardware I would be able to transfer FLAC albums to it seamlessly through my Linux Mint installation. But since it is a useless piece of hardware my music was cruelly imprisoned, only able to speak to me through the tinniest of laptop speakers.</p>
<p>So I had to get it fixed. Fortunately the laptop was still under warranty. After the Lenovo guy over the phone was satisfied the broken jack was not caused by software, he asked me to mail it in to the repair center in Texas. That was fine, but there was one catch: they couldn’t promise my hard drive wouldn’t be wiped in the course of a repair.</p>
<p>Such was an occasion at least for a backup, but I was also worried the repair technician would get spooked by the presence of Linux on my system. What would he do when greeted with a GRUB prompt that would by default take him into not-Windows? Would he say my warranty had been voided by Free Software Poison?</p>
<!-- MORE -->

<h3 id="experiment-perilous-the-perfect-crime">Experiment Perilous: The Perfect Crime</h3>
<p>I needed to buy a hard drive to hold the backup. It seemed a good opportunity to get a solid-state drive. Maybe I would even permanently switch my 1 terabyte hard disk for the more flashy<sup>1</sup> option. Wait a minute! While I was thinking of swapping drives, I might as well move Windows from my HDD onto the SSD, then install the SSD into the laptop body. That way the tech support guy would be perfectly happy.</p>
<p>As tedious as this all may sound, it sounded like a fun project not just to me but to my good friend Matt. He pledged to join me.</p>
<h3 id="linux-fail">Linux Fail</h3>
<p>Once my SSD came, the two of us set about making a partition table to accomodate the several Windows partitions in my fragmented HDD. We tried a few tools for this, most notably GNU parted, fdisk, and the Linux Mint disk utility. All of them utterly failed in our case. The utilities would complete a couple of operations, then freak out and think there were no entries in the disk’s partition table.</p>
<p>What’s more, we were led to believe that Windows was not going to like waking up on a disk with different numbers in the partition table (as would be required on a disk of different size), on a drive of a different make than it thought it had been installed on. We moved on to plan B: Instead of installing a Windows-only HDD into my laptop, just hide Linux. Find a way to hide GRUB and to boot into Windows by default. Technician sees no evil, technician does no evil.</p>
<p>Now the SSD was only needed as a backup. But instead of leaving it merely a glorified flash drive, why not make the SSD a working Linux installation? We couldn’t see why not.</p>
<p>Shamefully, in the wake of the Linux tools’ failure to partition the drive we resorted to using Windows 7 to do the job, and it worked flawlessly. With the help of <a href="http://www.linuxliveusb.com/">this utility</a> and a flash drive, we had the newest version of Mint running on the SSD in a jiffy.</p>
<h3 id="a-security-issue">A Security Issue</h3>
<p>From there it was trivial to copy the 60 GB of files I cared about in my home directory to the SSD. A little too trivial, actually. Who was to say I had permission to copy those files if they weren’t marked readable? Well, <code>sudo</code> said. But not <code>sudo</code> on my original system; <code>sudo</code> on the new one. I didn’t need root access on the <em>source</em> disk to copy from it; I just needed it on the <em>destination.</em> That seemed a serious problem to me.</p>
<p>I suppose that is what full-disk encrpytion is for.</p>
<h3 id="hiding-grub">Hiding GRUB</h3>
<p>Hiding GRUB was easy. We could have edited the config file directly, but we preferred to use a little GUI utility that we installed through <code>apt-get</code>: <a href="https://launchpad.net/grub-customizer">grub-customizer</a>. We only needed to change two settings: <code>GRUB_DEFAULT</code> set the default OS to boot into, and <code>GRUB_TIMEOUT</code> set how long to wait before booting into that OS. With the default set to Windows and the timeout set to 0, the technician would need to look considerably deeper to notice another OS installed on the system. Most likely, she would see what she expected to and move on.</p>
<h3 id="linux-with-benefits">Linux with Benefits</h3>
<p>Our solution had one drawback: once we set the laptop to boot into Windows automatically, the normal process to boot Linux wouldn’t work. That could be annoying once the laptop came back. But our backup Linux install had already solved this problem! We could boot from <em>that</em> device, which would load GRUB, which would detect the Mint install on the HDD, which would allow us to boot into that and revert the GRUB configuration.</p>
<p>There were other benefits. Now that I had a disembodied installation with all of my files, I could boot into the SSD using another computer. That way while my laptop was gone I could continue to work and listen to music; it would be almost as if it never left.</p>
<h3 id="bios-fail">BIOS Fail</h3>
<p>In practice, the other machines I had available to me ran either Mac OS X or Windows 8. Unlike my laptop Macs don’t run BIOS; they run EFI. Likewise Windows 8 laptops have moved to UEFI. Neither system was eager to let me boot from my SSD. OS X wouldn’t even recognize the drive as mountable, and even after disabling Secure Boot the Windows laptop would only give me a cryptic information-less error message when trying to boot.</p>
<p>I could have tried harder to solve this, but given my laptop was only gone a week I didn’t find it worth it to do so. When I needed some files I used an EFI-bootable flash drive to boot into Linux on my Mac, copy the files to another partition on the flash drive, and boot back into OSX. It wasn’t exactly as convenient as I had envisioned but it worked.</p>
<h3 id="in-sum">In Sum</h3>
<p>Like all projects of this nature, I think Matt and I spent much more time than we intended and also learned more than we expected. The end result was satisfactory. Right now? I’m typing this on my laptop, listening to Gregorian chant on my sweet headphones through the audio jack.</p>
<p><sup>1</sup> Pun intended.</p>
</article>

]]></summary>
</entry>
<entry>
    <title>Hello, world!</title>
    <link href="http://nickmcavoy.com/blog/tech/posts/2013/10/28/hello-blog/" />
    <id>http://nickmcavoy.com/blog/tech/posts/2013/10/28/hello-blog/</id>
    <published>2013-10-28T00:00:00Z</published>
    <updated>2013-10-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article>
  <header>
    <h1 class="entry-title">
      <a href="/tech/posts/2013/10/28/hello-blog/">Hello, world!</a>
    </h1>
    <div class="meta">
      <time datetime="2013-10-28" pubdate data-updated="true">28 October 2013</time>
      <div class="tags"><a href="/tags/placeholder/">placeholder</a></div>
    </div>
  </header>

  <p>Hello, world!</p>
</article>

]]></summary>
</entry>

</feed>
